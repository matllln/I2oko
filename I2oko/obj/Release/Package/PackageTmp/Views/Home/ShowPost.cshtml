@model I2oko.Models.PostModel

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="../Content/img/Idoko/favicon.ico">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.rtl.min.css"
          integrity="sha384-beJoAY4VI2Q+5IPXjI207/ntOuaz06QYCdpWfWRv4lSFDyUSqsM0W+wiAMr2I185" crossorigin="anonymous">
    <!-- <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css"> -->
    <link rel="stylesheet" href="../Content/style/show post style.css">

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ"
            crossorigin="anonymous"></script>
    <script defer src="https://unpkg.com/alpinejs@3.3.4/dist/cdn.min.js"></script>
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">

</head>
<body>

    @Html.ActionLink("پنجره باز", "Window", "Idoko", new { @class = "Windo hover-grow" })
    @Html.ActionLink("صفحه من", "Proofile", "Idoko", new { @class = "Page hover-grow" })
    @Html.ActionLink("خوشمزه ها", "Delicious", "Idoko", new { @class = "Food hover-grow" })
    @Html.ActionLink("چه خبرا؟", "News", "Idoko", new { @class = "Invite hover-grow" })
    @Html.ActionLink("حیوانات خانگی", "Pet", "Idoko", new { @class = "Pet hover-grow" })
    <!-- -------------------------------------------------------------------------------- -->
    <!-- -------------------------------------------------------------------------------- -->

        <img class="rectangle r1" src="@Session["UserPicturePost"]">
        <img class="rectangle r2" src="@Session["ImagePathPost"]" alt="Selected Image">
        <div class="w3-container">
            <!-- بررسی نوع فایل -->
            @if (Session["ImagePathPost"] != null && (Path.GetExtension(Session["ImagePathPost"].ToString()).ToLower() == ".jpg" || Path.GetExtension(Session["ImagePathPost"].ToString()).ToLower() == ".png"))
            {
                <!-- اگر عکس باشد -->
                <img class="rectangle r2" alt="Selected Image" src="@Session["ImagePathPost"]" style="cursor:zoom-in" onclick="openModall()">
            }
            else if (HttpContext.Current.Session["ImagePathPost"] != null && (Path.GetExtension(HttpContext.Current.Session["ImagePathPost"].ToString()).ToLower() == ".mp4" || Path.GetExtension(HttpContext.Current.Session["ImagePathPost"].ToString()).ToLower() == ".avi"))
            {
                <div>
                    <video class="rectangle r2" onclick="openModall()">
                        <source src="@Session["ImagePathPost"]" type="video/mp4">
                        <!-- اگر نوع ویدیو دیگری دارید، متناسب با آن عنصر <source> را تنظیم کنید -->
                        Your browser does not support the video tag.
                    </video>
                    <img class="VideoIcon" src="~/Content/img/Idoko/video.svg" onclick="openModall()" />
                </div>

                <!-- اگر ویدیو باشد -->

            }

            <!-- مدال -->
            <div id="modal01" class="w3-modal" onclick="closeModall()">
                <span class="w3-button w3-hover-red w3-xlarge w3-display-topright">&times;</span>
                <div class="w3-modal-content w3-animate-zoom">
                    <!-- تصویر یا ویدیو در مدال -->
                    @if (Session["ImagePathPost"] != null && (Path.GetExtension(Session["ImagePathPost"].ToString()).ToLower() == ".jpg" || Path.GetExtension(Session["ImagePathPost"].ToString()).ToLower() == ".png"))
                    {
                        <img class="ImgModal" src="@Session["ImagePathPost"]" style="width: 400px;height: 400px;">
                    }
                    else if (Session["ImagePathPost"] != null && (Path.GetExtension(Session["ImagePathPost"].ToString()).ToLower() == ".mp4" || Path.GetExtension(Session["ImagePathPost"].ToString()).ToLower() == ".avi"))
                    {
                        <video id="videoPlayer" controls class="ImgModal" style="width: 400px;height: 400px;">
                            <source src="@Session["ImagePathPost"]" type="video/mp4">
                            <!-- اگر نوع ویدیو دیگری دارید، متناسب با آن عنصر <source> را تنظیم کنید -->
                            Your browser does not support the video tag.
                        </video>
                    }
                </div>
            </div>
        </div>

        <pre class="rectangle Caption">@Html.Raw(ViewBag.TextPost)</pre>

        <button id="Report" class="RepIcon">گزارش ایراد</button>

        @if (ViewBag.UserNameLoginPost == ViewBag.UsernamePost)
        {
            <form action="/Home/PostToRemove" method="post">
                <img src="~/Content/img/Idoko/Delete Post.svg" class="RemovePost" />
                <p class="RemovePostText">حذف پست</p>
                <input type="hidden" name="PostID" id="PostID" value="@ViewBag.PostID" />
                <button class="RemovePost" type="submit"></button>
            </form>
        }



        @if (ViewBag.PostIsSaveModel != "True")
        {
            <form action="/Home/FavoriteToAdd" method="post">
                <input type="hidden" name="PostIDSave" id="PostIDSave" value="@ViewBag.PostID" />
                <button id="Save" type="submit">دوستش دارم</button>
            </form>
        }
        else
        {
            <form action="/Home/FavoriteToRemove" method="post">
                <input type="hidden" name="PostIDSave" id="PostIDSave" value="@ViewBag.PostID" />
                <button id="Save" type="submit">دوستش ندارم</button>
            </form>
        }


        @if (ViewBag.PostIsLikeModel != "True")
        {
            <form action="/Home/LikeToAdd" method="post">
                <input type="hidden" name="PostIDLike" id="PostIDLike" value="@ViewBag.PostID" />
                <label class="Like" for="Like">
                    <img class="Like" src="~/Content/img/Idoko/like.svg">
                </label>
                <button id="Like" type="submit" style="display:none;"></button>
            </form>
        }
        else
        {
            <form action="/Home/LikeToRemove" method="post">
                <input type="hidden" name="PostIDLike" id="PostIDLike" value="@ViewBag.PostID" />
                <label class="Like" for="UnLike">
                    <img class="Like" type="submit" src="~/Content/img/Idoko/unlike.svg">
                </label>
                <button id="UnLike" type="submit" style="display:none;"></button>
            </form>
        }


        <label class="LikeTxt">@ViewBag.PostLikeNumber</label>
        <img class="View" src="~/Content/img/Idoko/view.svg">
        <label class="ViewTxt">@ViewBag.ViewPostNumber</label>
        <label class="CountCommentTxt"></label>
        <img class="CountComment" onclick="openModal()" src="~/Content/img/Idoko/comment.svg">
        <div onclick="history.back()">
            <img class="BackIcon" src="../Content/img/Idoko/back.png" alt="">
        </div>
        <label class="Username">@ViewBag.UsernamePost</label>
        <div class="overlay" id="overlay"></div>
        <div id="myModal" class="modal">
            <div class="" id="modalContent">
                <div class="grid-Comment" id="grid">
                    <section class="Comment-list">
                        <div class="AllComment">
                            <img class="rectangle r3" src="@Session["UserLoginPicture"]" />
                            <div class="rectangle Comment"></div>
                            <label class="LkeComment">❤</label>
                            <label class="Replay">💬</label>
                            <label class="Username2">@ViewBag.UserNameLoginPost</label>
                        </div>
                        <div class="AllComment">
                            <div class="rectangle r3"></div>
                            <div class="rectangle Comment"></div>
                            <label class="LkeComment">❤</label>
                            <label class="Replay">💬</label>
                        </div>
                    </section>
                </div>
                <div class="container">
                    <div class="input-group">
                        <label class="input-group__label" for="myInput">@ViewBag.UserNameLoginPost</label>
                        <textarea id="myInput" class="input-group__input"></textarea>
                            <img class="Commentprofile" src="@Session["UserLoginPicture"]" />
                    </div>
                </div>
                <span class="close" onclick="closeModal()">&times;</span>

                <input class="Send btn-secondary hover-grow" type="submit" value="ارسال" />

            </div>
        </div>
    

        <script>
            document.addEventListener("DOMContentLoaded", function () {
                var modal = document.getElementById('modal01');
                var video = document.getElementById('videoPlayer');
                var closeButton = document.querySelector('.w3-button');

                closeButton.addEventListener('click', function () {
                    closeModalAndPauseVideo();
                });

                modal.addEventListener('click', function (event) {
                    if (event.target === modal) {
                        closeModalAndPauseVideo();
                    }
                });

                function closeModalAndPauseVideo() {
                    modal.style.display = 'none';
                    if (!video.paused) {
                        video.pause();
                    }
                }
            });
        </script>

        <script>
            function openModall() {
                document.getElementById('modal01').style.display = 'block';
            }

            function closeModall() {
                document.getElementById('modal01').style.display = 'none';
            }
        </script>
        <script>
            // Function to open the modal and overlay
            function openModal() {
                // Get the modal element
                var modal = document.getElementById('myModal');

                // Get the overlay element
                var overlay = document.getElementById('overlay');

                // Display the modal and overlay
                modal.style.display = 'block';
                overlay.style.display = 'block';
            }

            // Function to close the modal and overlay
            function closeModal() {
                document.getElementById('myModal').style.display = 'none';
                document.getElementById('overlay').style.display = 'none';
            }

            // Close the modal and overlay if the user clicks outside the modal content
            window.onclick = function (event) {
                var modal = document.getElementById('myModal');
                var overlay = document.getElementById('overlay');
                if (event.target == overlay) {
                    modal.style.display = 'none';
                    overlay.style.display = 'none';
                }
            }

        </script>
        <script>

            document.addEventListener('DOMContentLoaded', function () {
                loadDarkModeState();
            });

            // تعریف توابع مربوط به ذخیره و بازیابی وضعیت دارک مود
            function saveDarkModeState() {
                var darkModeState = {
                    "dark-mode": document.body.classList.contains("dark-mode"),
                    "dark-buttons": document.querySelector(".hover-grow").classList.contains("dark-button"),
                    "dark-profile": document.querySelector(".Profile").classList.contains("dark-profile"),
                    "dark-rectangles": document.querySelector(".rectangle").classList.contains("dark-rectangle"),
                    "label-darklabel": document.querySelector("label").classList.contains("darklabel"),
                    "a-darklabel": document.querySelector("a").classList.contains("darklabel")
                };

                localStorage.setItem("dark-mode-state", JSON.stringify(darkModeState));
            }

            function loadDarkModeState() {
                var darkModeState = JSON.parse(localStorage.getItem("dark-mode-state")) || {};

                if (darkModeState["dark-mode"]) {
                    document.body.classList.add("dark-mode");
                }

                var buttons = document.querySelectorAll(".hover-grow");
                buttons.forEach(button => {
                    if (darkModeState["dark-buttons"]) {
                        button.classList.add("dark-button");
                    }
                });

                //if (darkModeState["dark-profile"]) {
                //    document.querySelector(".Profile").classList.add("dark-profile");
                //}

                var rectangles = document.querySelectorAll(".rectangle");
                rectangles.forEach(rectangle => {
                    if (darkModeState["dark-rectangles"]) {
                        rectangle.classList.add("dark-rectangle");
                    }
                });

                // تغییر بک‌گراند .darkimg در حالت دارک مود
                var darkMode = document.body.classList.contains("dark-mode");
                var darkImg = document.querySelector(".darkimg");
                // بازنشانی کلاس darklabel به لیبل و تگ a در حالت دارک مود
                var labels = document.querySelectorAll("label,a");
                labels.forEach(label => {
                    if (darkModeState["label-darklabel"] || darkModeState["a-darklabel"]) {
                        label.classList.add("darklabel");
                    } else {
                        label.classList.remove("darklabel");
                    }
                });

            }
        </script>

    </body>
</html>
