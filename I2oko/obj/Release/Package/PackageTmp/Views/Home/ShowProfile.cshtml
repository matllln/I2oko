@model I2oko.Models.UserModel

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="../Content/img/Idoko/favicon.ico">

    <link rel="stylesheet" href="../Content/style/Show profile style.css">
    <link rel="stylesheet" href="../Content/style/Showprofile style2.css">

    <link rel="stylesheet" href="~/Content/recomand/all.css">
    <link rel="stylesheet" href="~/Content/recomand/reset.min.css">

    <link rel="stylesheet" href="~/Content/recomand/bootstrap.rtl.min.css"
          integrity="sha384-beJoAY4VI2Q+5IPXjI207/ntOuaz06QYCdpWfWRv4lSFDyUSqsM0W+wiAMr2I185" crossorigin="anonymous">
    <script src="~/Content/recomand/bootstrap.bundle.min.js"
            integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ"
            crossorigin="anonymous"></script>
    <script defer src="~/Content/recomand/cdn.min.js"></script>
    <link href='~/Content/recomand/parsinee.css' rel='stylesheet'>
    <link rel='stylesheet' href='~/Content/recomand/profile/bootstrap.min.css'>
    <link rel='stylesheet' href='~/Content/recomand/profile/cropper.css'>
</head>
<body>
    <div class="rectangle Headr"></div>
    <div class="rectangle HeadrRight"></div>
    <div class="rectangle HeadrLeft "></div>
    <img class=" Profile " src="@ViewBag.ProfilePicture" />
    <img class="logo" src="../Content/img/Idoko/1.pngArtboard 1@4x.png">
    <!--  ------------------------------------------------------- -->
    <!-- ------------------------------------------------------------------------- -->

    @Html.ActionLink("پنجره باز", "Window", "Idoko", new { @class = "Windo hover-grow darkbutton" })
    @Html.ActionLink("صفحه من", "Proofile", "Idoko", new { @class = "Page hover-grow" })
    @Html.ActionLink("خوشمزه ها", "Delicious", "Idoko", new { @class = "Food hover-grow" })
    @Html.ActionLink("چه خبرا؟", "News", "Idoko", new { @class = "Invite hover-grow" })
    @Html.ActionLink("حیوانات خانگی", "Pet", "Idoko", new { @class = "Pet hover-grow" })


    <!-- -------------------------------------------------------------------------------- -->

    <a href="~/Home/Window">
        <img class="BackIcon" src="../Content/img/Idoko/back.png" alt="">
    </a>
    <a href="/Home/friendShowProfile"><label class="Friends" for="">دوستان</label></a>
    <a href="/Home/ContactShowProfile"><label class="Audiences" for="">مخاطبان</label></a>
    <label class="Post" for="">رویداد ها</label>
    <!-- -------------------------------------------------------------------------------- -->
    @using (Html.BeginForm("ShowProfile", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {


        if (ViewBag.ContactToAdd != "True")
        {
            <form action="/Home/ShowProfile" method="post">
                <input type="hidden" name="FollowersUserName" value="@Session["Owner"].ToString()" />
                <button class="Search hover-grow" type="submit">!دوستت بشه ؟</button>
            </form>
        }
        else 
        {

            <form action="/Home/ShowProfile" method="post">
                <input type="hidden" name="FollowersUserNameRemove" value="@Session["Owner"].ToString()" />
                <button class="Search hover-grow" type="submit">!دوستت نباشه ؟</button>
            </form>
        }

        <div class="grid-container" id="grid">
            <section class="post-list">
                @if (ViewBag.Posts != null)
                {
                    foreach (var post in ViewBag.Posts)
                    {
                        if (!string.IsNullOrEmpty(post.PictureURL) || !string.IsNullOrEmpty(post.MediaURL))
                        {
                            string actionName;
                            object routeValues;

                            if (!string.IsNullOrEmpty(post.MediaURL))
                            {
                                actionName = "ShowPost";
                                routeValues = new
                                {
                                    PostID = post.PostID,
                                };
                            }
                            else if (!string.IsNullOrEmpty(post.Subject))
                            {
                                actionName = "ShowPostRecipe";
                                routeValues = new
                                {
                                    FoodID = post.FoodID,
                                };
                            }
                            else
                            {
                                continue;
                            }
                            <a href='@Url.Action(actionName, "Home", routeValues)' class="post">
                                @if (!string.IsNullOrEmpty(post.PictureURL) && (post.PictureURL.EndsWith(".jpg") || post.PictureURL.EndsWith(".jpeg") || post.PictureURL.EndsWith(".png")))
                                {
                                    <figure class="post-image">
                                        <div class="Pot-icon">
                                            <img class="Poticon" src="~/Content/img/Idoko/pot.svg" />
                                        </div>
                                        <img class="r1" src="@post.PictureURL" alt="User Post Image">

                                    </figure>
                                }
                                else if (!string.IsNullOrEmpty(post.MediaURL) && post.MediaURL.EndsWith(".mp4"))
                                {
                                    <figure class="">
                                        <div class="video-icon">
                                            <img class="VideoIcon" src="~/Content/img/Idoko/video.svg" />
                                        </div>
                                        <video class="VideoStyle">
                                            <source src="@post.MediaURL" type="video/mp4">
                                            Your browser does not support the video tag.
                                        </video>
                                    </figure>
                                }
                                else if (!string.IsNullOrEmpty(post.MediaURL) && post.MediaURL.EndsWith(".jpg") || post.MediaURL.EndsWith(".jpeg") || post.MediaURL.EndsWith(".png"))
                                {
                                    <figure class="post-image">
                                        <img class="r1" src="@post.MediaURL" alt="User Post Image">
                                    </figure>
                                }
                                <div class="post-overlay">
                                    <p>
                                        <span class="post-likes"><i class="fa fa-heart" aria-hidden="true"></i> 150</span>
                                        <span class="post-comments"><i class="fa fa-comment" aria-hidden="true"></i> 10</span>
                                    </p>
                                </div>
                            </a>
                        }
                    }
                }
                else
                {
                    <p>No images found.</p>
                }


            </section>
        </div>

        <div class="rectangle FriendsPanel">@ViewBag.FollowersCount</div>
        <div class="rectangle AudiencesPanel">@ViewBag.FollowingsCount</div>
        <div class="rectangle PostPanel">@ViewBag.NumberOfPosts</div>
        <div class="rectangle Username"> <label> @Session["Owner"] </label> </div>
        <div class="rectangle Bio"> <label class="BioLabel"> @ViewBag.Biography </label> </div>
        <div class="rectangle TextDay"></div>
        <div class="rectangle Catgory"> <label class="CateguriLabel"> @ViewBag.Categuri </label> </div>

    }
    <script>
        function myFunction() {
            var element = document.body;
            element.classList.toggle("dark-mode");

            // تغییر رنگ باتن‌ها
            var buttons = document.querySelectorAll(".hover-grow");
            buttons.forEach(button => button.classList.toggle("dark-button"));

            // تغییر رنگ تصویر پروفایل
            var profileImg = document.querySelector(".Profile");
            profileImg.classList.toggle("dark-profile");

            // تغییر رنگ rectangle ها
            var rectangles = document.querySelectorAll(".rectangle");
            rectangles.forEach(rectangle => rectangle.classList.toggle("dark-rectangle"));

            // افزودن کلاس darklabel به لیبل و تگ a در حالت دارک مود
            var labels = document.querySelectorAll("label,a");
            labels.forEach(label => label.classList.toggle("darklabel"));

            // ذخیره تمام تغییرات در Local Storage
            saveDarkModeState();
        }

        // درخواست اطلاعات از Local Storage در هنگام بارگذاری صفحه
        document.addEventListener('DOMContentLoaded', function () {
            loadDarkModeState();
        });

        // تعریف توابع مربوط به ذخیره و بازیابی وضعیت دارک مود
        function saveDarkModeState() {
            var darkModeState = {
                "dark-mode": document.body.classList.contains("dark-mode"),
                "dark-buttons": document.querySelector(".hover-grow").classList.contains("dark-button"),
                "dark-profile": document.querySelector(".Profile").classList.contains("dark-profile"),
                "dark-rectangles": document.querySelector(".rectangle").classList.contains("dark-rectangle"),
                "label-darklabel": document.querySelector("label").classList.contains("darklabel"),
                "a-darklabel": document.querySelector("a").classList.contains("darklabel")


            };

            localStorage.setItem("dark-mode-state", JSON.stringify(darkModeState));
        }

        function loadDarkModeState() {
            var darkModeState = JSON.parse(localStorage.getItem("dark-mode-state")) || {};

            if (darkModeState["dark-mode"]) {
                document.body.classList.add("dark-mode");
            }

            var buttons = document.querySelectorAll(".hover-grow");
            buttons.forEach(button => {
                if (darkModeState["dark-buttons"]) {
                    button.classList.add("dark-button");
                }
            });

            if (darkModeState["dark-profile"]) {
                document.querySelector(".Profile").classList.add("dark-profile");
            }

            var rectangles = document.querySelectorAll(".rectangle");
            rectangles.forEach(rectangle => {
                if (darkModeState["dark-rectangles"]) {
                    rectangle.classList.add("dark-rectangle");
                }
            });

            // تغییر بک‌گراند .darkimg در حالت دارک مود
            var darkMode = document.body.classList.contains("dark-mode");
            var darkImg = document.querySelector(".darkimg");

            darkImg.style.background = darkMode ? "teal" : "";

            // بازنشانی کلاس darklabel به لیبل و تگ a در حالت دارک مود
            var labels = document.querySelectorAll("label,a");
            labels.forEach(label => {
                if (darkModeState["label-darklabel"] || darkModeState["a-darklabel"]) {
                    label.classList.add("darklabel");
                } else {
                    label.classList.remove("darklabel");
                }
            });
        }
    </script>

</body>
</html>